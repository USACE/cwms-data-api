plugins {
    id 'cda.deps-conventions'
    id 'cda.java-conventions'
    id 'war'
}

configurations {
    info
    webjars
    docker
    baseLibs
    tomcatLibs
}

configurations.implementation {
    exclude group: 'com.oracle.database.jdbc', module: 'ojdbc'
}

dependencies {
    implementation(libs.jaxb.api)
    implementation(libs.jaxb.core)
    implementation(libs.jaxb.impl)
    implementation(libs.cwms.db.dao) {
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "org.jooq", module: "jooq"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "mil.army.usace.hec", module: "cwms-db-codegen"
    }
    implementation(libs.cwms.db.jooq.base){
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "org.jooq", module: "jooq"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "mil.army.usace.hec", module: "cwms-db-jooq-codegen"

    }
    implementation(libs.cwms.db.jooq.codegen) { 
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "org.jooq", module: "jooq"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.jooq.pro-java-8", module: "jooq"
    }

    implementation(libs.slf4j)

    implementation(libs.monolith) {
        //exclude group: "org.python", module: "jython-standalone"
        //exclude group: "mil.army.usace.hec.swingx"
        exclude group: "*"
    }

    implementation(libs.google.flogger.api)
    implementation(libs.google.findbugs)
    implementation(libs.google.errorProne)
    runtimeOnly(libs.google.flogger.backend)

    implementation(libs.nucleus.data)
    implementation(libs.nucleus.metadata)
    implementation(libs.cwms.ratings.core) {
        
        //exclude group: "mil.army.usace.hec.swingx"
        exclude group: "*"
    }

    implementation(libs.cwms.ratings.io.xml)
    implementation(libs.cwms.ratings.io.jdbc) {
        exclude group: "mil.army.usace.hec", module: "cwms-db-jooq-codegen"
    }

    implementation(libs.jooq) {
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "javax.xml.bind", module: "*"
    }
    implementation(libs.owasp.sanitizer)

    // https://mvnrepository.com/artifact/de.grundid.opendatalab/geojson-jackson
    implementation(libs.geojson.jackson)

    implementation(libs.javalin.core) {
        exclude group: "org.eclipse.jetty"
        exclude group: "org.eclipse.jetty.websocket"
    }
    implementation(libs.javalin.openapi) {
        //exclude group: "org.eclipse.jetty"
        exclude group: "org.eclipse.jetty.websocket"
        exclude group: "jakarta.xml.bind", module: "*"
    }
    implementation(libs.swagger.core) {
        exclude group: "jakarta.xml.bind", module: "*"
    }

    compileOnly(libs.javaee.web.api)
    compileOnly(libs.cwms.tomcat.auth)


    runtimeOnly(libs.jstl)

    implementation(libs.jjwt.api)
    runtimeOnly(libs.jjwt.impl)
    runtimeOnly(libs.jjwt.jackson)

    implementation project(":access-manager-api")

    implementation(libs.bundles.metrics)

    implementation(libs.bundles.jackson)

    implementation(libs.aqapi)
    implementation(libs.jmscommon)
    //For some reason the caffeine transitive dependency makes gradle angry
    implementation(libs.activemq.artemis.server) {
        exclude group: "com.github.ben-manes.caffeine", module: "caffeine"
    }
    implementation(libs.activemq.artemis.client) {
        exclude group: "com.github.ben-manes.caffeine", module: "caffeine"
    }
    implementation(libs.camel.core)
    implementation(libs.camel.jms)

    testImplementation(libs.bundles.junit)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testImplementation(libs.mockito.core)
    testRuntimeOnly(libs.jaxb.impl)

    baseLibs(libs.oracle.jdbc.driver)

    compileOnly(libs.oracle.jdbc.driver)
    testRuntimeOnly(libs.oracle.jdbc.driver)

    testImplementation(libs.bundles.jackson)
    testImplementation(libs.rest.assured)
    testImplementation(libs.hamcrest.all)

    tomcatLibs(libs.bundles.tomcat.embedded)
    tomcatLibs(libs.bundles.tomcat.support)
    tomcatLibs(libs.google.flogger.api)
    tomcatLibs(libs.google.flogger.backend)

    testImplementation(libs.bundles.testcontainers)
    

    testImplementation(libs.apache.commons.csv)
    testImplementation(libs.cwms.tomcat.auth)
    testImplementation(libs.apache.freemarker)

    webjars(libs.swagger.ui) {
        transitive = false
    }

}

task extractWebJars(type: Copy) {
    doFirst {
        project.mkdir("$buildDir/extra/swagger-ui")
    }
    from zipTree(configurations.webjars.singleFile)
    into file("$buildDir/extra")
    includeEmptyDirs false
    eachFile {
        path -= ~/^.+?\/.+?\/.+?\/.+?\/.+?\//
    }
    exclude "**/index.html*"
    include "/META-INF/resources/webjars/swagger-ui/**"
    includeEmptyDirs = false
}

war {
    //dependsOn extractInfo
    dependsOn extractWebJars
    from "$buildDir/extra"
    from "src/resources/"

    manifest {
        attributes "build-version": project.version
    }

    doLast {
        println(war.archiveFileName.toString())
        println("::set-output name=WARFILE::${project.name}-${project.version}.war")
    }
}

compileTestJava.classpath += configurations.tomcatLibs

sourceSets {
    formatList {
        output.resourcesDir = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")
        java.destinationDirectory = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")
    }
    main {
        runtimeClasspath += formatList.runtimeClasspath
    }
    test {
        runtimeClasspath += formatList.runtimeClasspath
    }
}

test {
    useJUnitPlatform() {
        excludeTags "integration"
    }
    classpath += configurations.tomcatLibs
}

description = 'CWMS-Data-API'

task generateConfig(type: Copy) {
    doFirst {
        project.delete "$buildDir/tomcat/"
        project.mkdir "$buildDir/tomcat/logs"
    }
    from 'src/test/resources/tomcat'
    into "$buildDir/tomcat"

    //rename "context.xml", "context.xml.template"
    rename "tomcat-server.xml", "server.xml"

    inputs.dir "src/test/resources"
    outputs.dir "$buildDir/tomcat/conf"
}

task run(type: JavaExec) {
    group "application"
    dependsOn generateConfig
    dependsOn war

    classpath += configurations.baseLibs
    classpath += configurations.tomcatLibs
    classpath += sourceSets.test.output // to get the fixture

    mainClass = "fixtures.TomcatServer"
    systemProperties += project.properties.findAll { k, v -> k.startsWith("RADAR") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("CDA") }

    def context = project.findProperty("cda.war.context") ?: "spk-data"

    args "$buildDir/tomcat", "$buildDir/libs/${project.name}-${project.version}.war", context
    jvmArgs += "-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/logging.properties"
    jvmArgs += "-DTOMCAT_RESOURCES=$buildDir/tomcat/conf/context.xml"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=$buildDir/tomcat"
    jvmArgs += "-DwarContext=/" + context
    // If you have the docker-compose environment up and are trying to run
    // CDA from run to debug uncomment the following lines.
    //jvmArgs += "-Dcwms.dataapi.access.providers=KeyAccessManager,CwmsAccessManager,OpenID"
    //jvmArgs += "-Dcwms.dataapi.access.openid.wellKnownUrl=https://auth.test:8444/auth/realms/cwms/.well-known/openid-configuration"
    //jvmArgs += "-Dcwms.dataapi.access.openid.issuer=https://auth.test:8444/auth/realms/cwms"
}

task integrationTests(type: Test) {
    dependsOn test
    dependsOn generateConfig
    dependsOn war

    useJUnitPlatform() {
        includeTags "integration"
    }
    shouldRunAfter test
    classpath += configurations.baseLibs
    classpath += configurations.tomcatLibs
    // The before all extension will take care of these properties
    systemProperties += project.properties.findAll { k, v -> k.startsWith("RADAR") && !k.startsWith("RADAR_JDBC") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("CDA") && !k.startsWith("CDA_JDBC") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("testcontainer") }
    jvmArgs += "-DwarFile=$buildDir/libs/${project.name}-${project.version}.war"
    jvmArgs += "-DwarContext=/cwms-data"
    jvmArgs += "-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/logging.properties"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcwms.dataapi.access.provider=MultipleAccessManager"
    jvmArgs += "-Dcwms.dataapi.access.providers=KeyAccessManager,CwmsAccessManager"
    jvmArgs += "-Dcatalina.base=$buildDir/tomcat"
}

task prepareDockerBuild(type: Copy, dependsOn: war) {
    doFirst {
        project.mkdir("$buildDir/docker")
    }
    from "src/docker"
    into "$buildDir/docker"

    from(configurations.docker)

    from(configurations.baseLibs) {
        into "libs"
    }

    from(sourceSets.test.resources) {

        include "**/conf/context.xml"
        eachFile {
            path = name
        }
        includeEmptyDirs = false
    }

    from(war.outputs.files.singleFile) {
        //include "${project.name}-${project.version}.jar"
        into "cda/webapps"
        rename(".*\\.war", "cwms-data.war")
    }
}

task generateTimeSeriesSamples(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath
    classpath += configurations.baseLibs

    mainClass = "helpers.TsRandomSampler"

    def url = project.findProperty("dbUrl") ?: ""
    def user = project.findProperty("dbUser") ?: ""
    def password = project.findProperty("dbPassword") ?: ""

    args url
    args user
    args password
}
