apply plugin: 'war'

configurations {
    info
    webjars
    docker
    baseLibs
    tomcatLibs
}

configurations.implementation {
    exclude group: 'com.oracle.database.jdbc'
}
dependencies {
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "com.sun.xml.bind:jaxb-impl:3.0.2"
    implementation "com.sun.xml.bind:jaxb-core:3.0.2"
    implementation( "mil.army.usace.hec:cwms-db-dao:9.8.0") {
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    implementation( "mil.army.usace.hec:cwms-db-jooq:9.8.0"){
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    implementation('mil.army.usace.hec:cwms-db-jooq-codegen:7.0.0-SNAPSHOT') {
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "org.jooq.pro", module: "*"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    implementation 'org.slf4j:slf4j-jdk14:1.7.36'

    implementation( "mil.army.usace.hec:hec-monolith:3.3.20" ) {
        //exclude group: "org.python", module: "jython-standalone"
        //exclude group: "mil.army.usace.hec.swingx"
        exclude group: "*"
    }

    implementation('com.google.flogger:flogger:0.7.4')
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'com.google.errorprone:error_prone_annotations:2.15.0'
    runtime 'com.google.flogger:flogger-system-backend:0.7.4'

    implementation "mil.army.usace.hec:hec-nucleus-data:2.0.1"
    implementation "mil.army.usace.hec:hec-nucleus-metadata:2.0.1"
    implementation( 'mil.army.usace.hec:hec-cwms-ratings-core:2.0.2' ) {
        
        //exclude group: "mil.army.usace.hec.swingx"
        exclude group: "*"
    }

    implementation( 'mil.army.usace.hec:hec-cwms-ratings-io-xml:2.0.2' )
    implementation( 'mil.army.usace.hec:hec-cwms-ratings-io-jdbc:2.0.2' )

    implementation('org.jooq.pro:jooq:3.11.2') {
        exclude group: "com.oracle", module: "*"
        exclude group: "com.oracle.database.jdbc", module: "*"
        exclude group: "javax.xml.bind", module: "*"
    }
    implementation "com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20220608.1"

    // https://mvnrepository.com/artifact/de.grundid.opendatalab/geojson-jackson
    implementation group: 'de.grundid.opendatalab', name: 'geojson-jackson', version: '1.14'

    implementation("io.javalin:javalin:$JAVALIN_VERSION") {
        exclude group: "org.eclipse.jetty"
        exclude group: "org.eclipse.jetty.websocket"
    }
    implementation("io.javalin:javalin-openapi:$JAVALIN_VERSION") {
        //exclude group: "org.eclipse.jetty"
        exclude group: "org.eclipse.jetty.websocket"
        exclude group: "jakarta.xml.bind", module: "*"
    }
    implementation("io.swagger.core.v3:swagger-core:$SWAGGER_CORE_VERSION") {
        exclude group: "jakarta.xml.bind", module: "*"
    }

    compileOnly "javax:javaee-web-api:8.0.1"
    compileOnly 'mil.army.usace.hec.cwms.auth:cwms-tomcat-auth-api:1.1.0'


    runtimeOnly 'jstl:jstl:1.2'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    // Now using the FormatService annotation in runtime in JsonV1 too.
    implementation project(":annotations")
    implementation project(":access-manager-api")
    annotationProcessor project(":annotations")

    implementation "io.dropwizard.metrics:metrics-core:$dropwizard_version"
    implementation "io.dropwizard.metrics:metrics-servlets:$dropwizard_version"
    implementation "io.prometheus:simpleclient_dropwizard:0.15.0"
    implementation "io.prometheus:simpleclient_servlet:0.15.0"


    implementation "com.fasterxml.jackson.core:jackson-databind:$JACKSON_VERSION"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$JACKSON_VERSION"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$JACKSON_VERSION"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$JACKSON_VERSION"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testRuntimeOnly 'com.sun.xml.bind:jaxb-impl:2.3.4'

    baseLibs 'com.oracle.database.jdbc:ojdbc8:19.3.0.0'

    compileOnly 'com.oracle.database.jdbc:ojdbc8:21.7.0.0'
    testRuntimeOnly 'com.oracle.database.jdbc:ojdbc8:21.7.0.0'

    testImplementation "com.fasterxml.jackson.core:jackson-databind:$JACKSON_VERSION"
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$JACKSON_VERSION"
    testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$JACKSON_VERSION"
    testRuntimeOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$JACKSON_VERSION"

    testImplementation "org.mockito:mockito-core:3.2.4"
    testImplementation 'io.rest-assured:rest-assured:5.2.0'
    testImplementation "org.hamcrest:hamcrest-all:1.3"

    tomcatLibs "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
    tomcatLibs "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"
    tomcatLibs "org.apache.tomcat:tomcat-juli:$tomcatVersion"
    tomcatLibs "org.apache.tomcat:tomcat-jdbc:$tomcatVersion"
    tomcatLibs "com.google.flogger:flogger:0.7.4"
    tomcatLibs "com.google.flogger:flogger-system-backend:0.7.4"

    testImplementation "org.testcontainers:testcontainers:1.17.3"
    testImplementation 'org.testcontainers:database-commons:1.17.3'
    testImplementation "org.testcontainers:jdbc:1.17.3"
    testImplementation "org.testcontainers:junit-jupiter:1.17.3"
    testImplementation 'mil.army.usace.hec:testcontainers-cwms:1.0.7'

    testImplementation "org.apache.commons:commons-csv:1.9.0"
    testImplementation 'mil.army.usace.hec.cwms.auth:cwms-tomcat-auth-api:1.1.0'

    webjars('org.webjars:swagger-ui:5.9.0') {
        transitive = false
    }

}

configurations.all {
    exclude group: "org.python", module: "jython-standalone"
}

task extractWebJars(type: Copy) {
    doFirst {
        project.mkdir("$buildDir/extra/swagger-ui")
    }
    from zipTree(configurations.webjars.singleFile)
    into file("$buildDir/extra")
    includeEmptyDirs false
    eachFile {
        path -= ~/^.+?\/.+?\/.+?\/.+?\/.+?\//
    }
    exclude "**/index.html*"
    include "/META-INF/resources/webjars/swagger-ui/**"
    includeEmptyDirs = false
}

war {
    //dependsOn extractInfo
    dependsOn extractWebJars
    from "$buildDir/extra"
    from "src/resources/"

    manifest {
        attributes "build-version": project.version
    }

    doLast {
        println(war.archiveFileName.toString())
        println("::set-output name=WARFILE::${project.name}-${project.version}.war")
    }
}

compileTestJava.classpath += configurations.tomcatLibs

test {
    useJUnitPlatform() {
        excludeTags "integration"
    }
    classpath += configurations.tomcatLibs
}


description = 'CWMS-Data-API'

sourceSets {
    main {
        resources.srcDirs = ['src/main/resources', 'build/generated/sources/annotationProcessor/java/main']
    }
}


task generateConfig(type: Copy) {
    doFirst {
        project.delete "$buildDir/tomcat/"
        project.mkdir "$buildDir/tomcat/logs"
    }
    from 'src/test/resources/tomcat'
    into "$buildDir/tomcat"

    //rename "context.xml", "context.xml.template"
    rename "tomcat-server.xml", "server.xml"

    inputs.dir "src/test/resources"
    outputs.dir "$buildDir/tomcat/conf"
}

task run(type: JavaExec) {
    dependsOn generateConfig
    dependsOn war

    classpath += configurations.baseLibs
    classpath += configurations.tomcatLibs
    classpath += sourceSets.test.output // to get the fixture

    mainClass = "fixtures.TomcatServer"
    systemProperties += project.properties.findAll { k, v -> k.startsWith("RADAR") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("CDA") }

    args "$buildDir/tomcat", "$buildDir/libs/${project.name}-${project.version}.war", "/cwms-data"
    jvmArgs += "-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/logging.properties"
    jvmArgs += "-DTOMCAT_RESOURCES=$buildDir/tomcat/conf/context.xml"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcatalina.base=$buildDir/tomcat"
    // If you have the docker-compose environment up and are trying to run 
    // CDA from run to debug uncomment the following lines.
    //jvmArgs += "-Dcwms.dataapi.access.providers=KeyAccessManager,CwmsAccessManager,OpenID"
    //jvmArgs += "-Dcwms.dataapi.access.openid.wellKnownUrl=https://auth.test:8444/auth/realms/cwms/.well-known/openid-configuration"
    //jvmArgs += "-Dcwms.dataapi.access.openid.issuer=https://auth.test:8444/auth/realms/cwms"
}

task integrationTests(type: Test) {
    dependsOn test
    dependsOn generateConfig
    dependsOn war

    useJUnitPlatform() {
        includeTags "integration"
    }
    shouldRunAfter test
    classpath += configurations.baseLibs
    classpath += configurations.tomcatLibs
    // The before all extension will take care of these properties
    systemProperties += project.properties.findAll { k, v -> k.startsWith("RADAR") && !k.startsWith("RADAR_JDBC") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("CDA") && !k.startsWith("CDA_JDBC") }
    systemProperties += project.properties.findAll { k, v -> k.startsWith("testcontainer") }
    jvmArgs += "-DwarFile=$buildDir/libs/${project.name}-${project.version}.war"
    jvmArgs += "-DwarContext=/cwms-data"
    jvmArgs += "-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager"
    jvmArgs += "-Djava.util.logging.config.file=$projectDir/logging.properties"
    jvmArgs += "-Dorg.apache.tomcat.util.digester.PROPERTY_SOURCE=org.apache.tomcat.util.digester.EnvironmentPropertySource"
    jvmArgs += "-Dcwms.dataapi.access.provider=MultipleAccessManager"
    jvmArgs += "-Dcwms.dataapi.access.providers=KeyAccessManager,CwmsAccessManager"
    jvmArgs += "-Dcatalina.base=$buildDir/tomcat"
}

task generateTimeSeriesSamples(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath
    classpath += configurations.baseLibs

    mainClass = "helpers.TsRandomSampler"

    def url = project.findProperty("dbUrl") ?: ""
    def user = project.findProperty("dbUser") ?: ""
    def password = project.findProperty("dbPassword") ?: ""

    args url
    args user
    args password
}