#name: cwms
volumes:
  oracle_data:
  auth_data:
services:
  db:
    # if using gvenzl/oracle-xe you'll need to adjust the environment below
    image: ${ORACLE_DOCKER_IMAGE}
    volumes:
      - oracle_data:/opt/oracle/oradata
    environment:
      - ORACLE_PDB=CWMS
      - ORACLE_PWD=badSYSpassword
      - ORACLE_EDITION=enterprise
    ports:
      - 1521
    healthcheck:
      test: ["CMD","tnsping", "CWMS"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 40m
  db_install:
    depends_on:
      db:
        condition: service_healthy
    image: ${CWMS_SCHEMA_INSTALLER_IMAGE:-registry.hecdev.net/cwms/schema_installer:23.03.16}
    pull_policy: always
    tty: true
    environment:
      - DB_HOST_PORT=db:1521
      - DB_NAME=/CWMS
      - CWMS_PASSWORD=simplecwmspasswD1
      - SYS_PASSWORD=badSYSpassword
      # set to HEC/q0 for any national system work
      - OFFICE_ID=HEC
      - OFFICE_EROC=q0
      - INSTALLONCE=1
      - QUIET=1
    restart: "no"

  db_webuser_permissions:
    image: ${CWMS_SCHEMA_INSTALLER_IMAGE:-registry.hecdev.net/cwms/schema_installer:23.03.16}
    restart: "no"
    environment:
      - DB_HOST_PORT=db:1521
      - DB_NAME=/CWMS
      - CWMS_PASSWORD=simplecwmspasswD1
      - SYS_PASSWORD=badSYSpassword
      # set to HQ/q0 for any national system work
      - OFFICE_ID=HQ
      - OFFICE_EROC=q0
      - INSTALLONCE=1
      - QUIET=1
    command: >
      sh -xc "sqlplus CWMS_20/$$CWMS_PASSWORD@$$DB_HOST_PORT$$DB_NAME @/setup_sql/users $$OFFICE_EROC"
    volumes:
      - ./compose_files/sql:/setup_sql:ro
    depends_on:
      db:
        condition: service_healthy
      db_install:
        condition: service_completed_successfully


  data-api:
    depends_on:
      db:
        condition: service_healthy
      db_install:
        condition: service_completed_successfully
      db_webuser_permissions:
        condition: service_completed_successfully
      traefik:
        condition: service_healthy
    image: cwms-rest-api:3.0-compose
    build:
      target: api
      context: .
      dockerfile: Dockerfile
    command: bash -c "keytool -trustcacerts -importcert -alias cda_lab_root -keystore /opt/java/openjdk/jre/lib/security/cacerts -storepass changeit -file /conf/rootca.pem -noprompt || catalina.sh run"
    restart: unless-stopped
    volumes:
      - ./compose_files/pki/certs:/conf/
    environment:
      - CDA_JDBC_DRIVER=oracle.jdbc.driver.OracleDriver
      - CDA_JDBC_URL=jdbc:oracle:thin:@db/CWMS
      - CDA_JDBC_USERNAME=q0webtest
      - CDA_JDBC_PASSWORD=simplecwmspasswD1
      - CDA_POOL_INIT_SIZE=5
      - CDA_POOL_MAX_ACTIVE=10
      - CDA_POOL_MAX_IDLE=5
      - CDA_POOL_MIN_IDLE=2
      - cwms.dataapi.access.provider=MultipleAccessManager
      - cwms.dataapi.access.providers=KeyAccessManager,CwmsAccessManager,OpenID
      - cwms.dataapi.access.openid.wellKnownUrl=https://auth.localhost:8444/auth/realms/cwms/.well-known/openid-configuration
      - cwms.dataapi.access.openid.issuer=https://auth.localhost:8444/auth/realms/cwms
      - OTEL_RESOURCE_ATTRIBUTES=service.name=swt-data,service.version=3.0.9-9-28-23-SNAPSHOT,deployment.environment=development
      - OTEL_TRACES_SAMPLER=always_on
      - OTEL_IMR_EXPORT_INTERVAL=5000
      - OTEL_METRIC_EXPORT_INTERVAL=5000
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_COMPRESSION=gzip
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:5555
      - OTEL_IMR_EXPORTING_INTERVAL=5000
      - OTEL_EXPORTER_OTLP_INSECURE=true
    expose:
      - 7000
    healthcheck:
      test: ["CMD","/usr/bin/curl", "-I","localhost:7000/cwms-data/offices/HEC"]
      interval: 1m30s
      timeout: 1s
      retries: 10
      start_period: 2s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.data-api.rule=Host(`cwms-data.localhost`)"
      - "traefik.http.routers.data-api.entryPoints=web-secure"
      - "traefik.http.routers.data-api.tls=true"

  auth:
    image: quay.io/keycloak/keycloak:19.0.1
    command: ["start", "--features-disabled=admin2","--import-realm"]
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_FEATURES=admin-fine-grained-authz
      - KC_HOSTNAME=auth.localhost:8444
      - KC_HOSTNAME_URL=https://auth.localhost:8444
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=edge
      - KC_HTTP_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/auth
      - KC_HTTPS_KEY_STORE_FILE=/conf/server.keystore
      - KC_HTTPS_KEY_STORE_PASSWORD=badpassword
    volumes:
      - ./compose_files/pki/certs/main.ks:/conf/server.keystore:ro
      - ./compose_files/keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.localhost`)"
      - "traefik.http.routers.auth.entryPoints=web-secure"
      - "traefik.http.routers.auth.tls=true"
    expose:
      - 8080
      - 8443
    depends_on:
      traefik:
        condition: service_healthy
    


  # Proxy for HTTPS for OpenID
  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    ports:
      - "81:81"
      - "8444:8443"
    expose:
      - "8080"
    volumes:
      - ./compose_files/traefik/traefik.yml:/etc/traefik/traefik.yaml:ro
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./compose_files/pki/certs:/certs:ro
    healthcheck:
      test: traefik healthcheck --ping
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api.entryPoints=traefik"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"


  # OpenTelemetry Collector for collecting Metrics, Traces, and Logs
  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    hostname: collector
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    command: ["--config=/etc/collector-config.yaml"]
    volumes:
      - ./observability/collector-config-local.yaml:/etc/collector-config.yaml
    ports:
      - "5555:5555"
      - "6666:6666"

  # Grafana Tempo for processing Traces
  tempo:
    image: grafana/tempo:1.5.0
    command: [ "-search.enabled=true", "-config.file=/etc/tempo.yaml" ]
    container_name: tempo
    hostname: tempo
    volumes:
      - ./observability/tempo-config.yaml:/etc/tempo.yaml
      - ./observability/tempo-overrides.yaml:/etc/overrides.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "3200:3200"
      - "4317:4317"
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3200/status || exit 1

  # Prometheus for processing Metrics
  prometheus:
    image: prom/prometheus:v2.39.2
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./observability/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/status || exit 1

  # Grafana Loki for processing Logs
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki.yaml
    volumes:
      - ./observability/loki-config.yaml:/etc/loki.yaml
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1

  # Grafana for telemetry visualizations and alerts
  grafana:
    image: grafana/grafana:9.2.2
    container_name: grafana
    hostname: grafana
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
       condition: service_healthy
    volumes:
      - ./observability/grafana-bootstrap.ini:/etc/grafana/grafana.ini
      - ./observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
      - "GF_AUTH_DISABLE_LOGIN_FORM=true"
    ports:
      - "3000:3000"
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1